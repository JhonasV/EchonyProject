// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(EchonyDbContext))]
    [Migration("20180725024729_usuarioIdReply2")]
    partial class usuarioIdReply2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Domain.Amigos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmisorId");

                    b.Property<DateTime>("Fecha");

                    b.Property<int?>("ReceptorId");

                    b.HasKey("Id");

                    b.HasIndex("EmisorId");

                    b.HasIndex("ReceptorId");

                    b.ToTable("Amigos");
                });

            modelBuilder.Entity("Model.Domain.Comentarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contenido_comentario");

                    b.Property<DateTime>("Fecha_Publicacion");

                    b.Property<string>("Foto");

                    b.Property<int>("PublicacionesId");

                    b.Property<int?>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionesId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Model.Domain.CommentReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComentariosId");

                    b.Property<string>("Contenido_reply");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("PublicacionesId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionesId");

                    b.ToTable("CommentReply");
                });

            modelBuilder.Entity("Model.Domain.Detalles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("Fecha_Nacimiento");

                    b.Property<string>("Pais");

                    b.Property<string>("Sexo");

                    b.HasKey("Id");

                    b.ToTable("Detalles");
                });

            modelBuilder.Entity("Model.Domain.Emisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SolicitudAmistadId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudAmistadId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Emisor");
                });

            modelBuilder.Entity("Model.Domain.Foto", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("RutaFoto");

                    b.HasKey("Id");

                    b.ToTable("Fotos");
                });

            modelBuilder.Entity("Model.Domain.Likes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PublicacionesId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionesId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Model.Domain.Publicaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contenido")
                        .IsRequired();

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Foto");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Publicaciones");
                });

            modelBuilder.Entity("Model.Domain.Receptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SolicitudAmistadId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudAmistadId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Receptor");
                });

            modelBuilder.Entity("Model.Domain.SolicitudAmistad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Estado");

                    b.Property<DateTime>("Fecha");

                    b.Property<int?>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SolicitudAmistad");
                });

            modelBuilder.Entity("Model.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Codigo");

                    b.Property<string>("ConfirmacionClave")
                        .IsRequired();

                    b.Property<int?>("DetallesId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Estado");

                    b.Property<string>("Mensaje");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("Privada");

                    b.HasKey("Id");

                    b.HasIndex("DetallesId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Model.Domain.Amigos", b =>
                {
                    b.HasOne("Model.Domain.Emisor", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId");

                    b.HasOne("Model.Domain.Receptor", "Receptor")
                        .WithMany()
                        .HasForeignKey("ReceptorId");
                });

            modelBuilder.Entity("Model.Domain.Comentarios", b =>
                {
                    b.HasOne("Model.Domain.Publicaciones")
                        .WithMany("Comentarios")
                        .HasForeignKey("PublicacionesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Domain.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Model.Domain.CommentReply", b =>
                {
                    b.HasOne("Model.Domain.Publicaciones", "Publicaciones")
                        .WithMany()
                        .HasForeignKey("PublicacionesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Domain.Emisor", b =>
                {
                    b.HasOne("Model.Domain.SolicitudAmistad")
                        .WithOne("Emisor")
                        .HasForeignKey("Model.Domain.Emisor", "SolicitudAmistadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Domain.Foto", b =>
                {
                    b.HasOne("Model.Domain.Usuario", "Usuario")
                        .WithOne("Foto")
                        .HasForeignKey("Model.Domain.Foto", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Domain.Likes", b =>
                {
                    b.HasOne("Model.Domain.Publicaciones", "Publicaciones")
                        .WithMany("Like")
                        .HasForeignKey("PublicacionesId");

                    b.HasOne("Model.Domain.Usuario", "Usuario")
                        .WithMany("Likes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Domain.Publicaciones", b =>
                {
                    b.HasOne("Model.Domain.Usuario", "Usuario")
                        .WithMany("Publicaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Domain.Receptor", b =>
                {
                    b.HasOne("Model.Domain.SolicitudAmistad")
                        .WithOne("Receptor")
                        .HasForeignKey("Model.Domain.Receptor", "SolicitudAmistadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Domain.SolicitudAmistad", b =>
                {
                    b.HasOne("Model.Domain.Usuario")
                        .WithMany("Amigos")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Model.Domain.Usuario", b =>
                {
                    b.HasOne("Model.Domain.Detalles", "Detalles")
                        .WithMany()
                        .HasForeignKey("DetallesId");
                });
#pragma warning restore 612, 618
        }
    }
}
